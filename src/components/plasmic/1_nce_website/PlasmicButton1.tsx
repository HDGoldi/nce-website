// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: esfshpqx8ZjBqQ8kozVymU
// Component: EPtFtCkT_p
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_1_nce_website.module.css" // plasmic-import: esfshpqx8ZjBqQ8kozVymU/projectcss
import * as sty from "./PlasmicButton1.module.css" // plasmic-import: EPtFtCkT_p/css

export type PlasmicButton1__VariantMembers = {}

export type PlasmicButton1__VariantsArgs = {}
type VariantPropType = keyof PlasmicButton1__VariantsArgs
export const PlasmicButton1__VariantProps = new Array<VariantPropType>()

export type PlasmicButton1__ArgsType = {}
type ArgPropType = keyof PlasmicButton1__ArgsType
export const PlasmicButton1__ArgProps = new Array<ArgPropType>()

export type PlasmicButton1__OverridesType = {
  root?: p.Flex<"button">
}

export interface DefaultButton1Props {
  className?: string
}

function PlasmicButton1__RenderFunc(props: {
  variants: PlasmicButton1__VariantsArgs
  args: PlasmicButton1__ArgsType
  overrides: PlasmicButton1__OverridesType
  forNode?: string
}) {
  const { variants, args, overrides, forNode } = props

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        defaultcss.__wab_text,
        projectcss.root_reset,
        sty.root
      )}
    >
      {"Shop"}
    </button>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "button"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton1__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicButton1__VariantsArgs
  args?: PlasmicButton1__ArgsType
  overrides?: NodeOverridesType<T>
} & Omit<PlasmicButton1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicButton1__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton1__ArgProps,
      internalVariantPropNames: PlasmicButton1__VariantProps,
    })

    return PlasmicButton1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicButton1"
  } else {
    func.displayName = `PlasmicButton1.${nodeName}`
  }
  return func
}

export const PlasmicButton1 = Object.assign(
  // Top-level PlasmicButton1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicButton1
    internalVariantProps: PlasmicButton1__VariantProps,
    internalArgProps: PlasmicButton1__ArgProps,
  }
)

export default PlasmicButton1
/* prettier-ignore-end */
